<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Entity Init
m_facing = 1;
m_xPreviousList = ds_list_create();
m_yPreviousList = ds_list_create();
m_maximumPreviousTracked = 5;
for(var i = 0; i &lt; m_maximumPreviousTracked; i++)
{
  ds_list_add(m_xPreviousList, xstart);
  ds_list_add(m_yPreviousList, ystart);
}

//Member to support animation events
m_animationEventsMap = undefined;
m_lastImageIndex = 0;
m_lastSpriteIndex = undefined;
enum EventMembers
{
  Script,
  Args,
  ID
}

//For debug purposes
m_frameNumber = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Add to previous lists
ds_list_insert(m_xPreviousList, 0, x);
ds_list_insert(m_yPreviousList, 0, y);

if(ds_list_size(m_xPreviousList) &gt; m_maximumPreviousTracked)
{
  ds_list_delete(m_xPreviousList, m_maximumPreviousTracked);
}

if(ds_list_size(m_yPreviousList) &gt; m_maximumPreviousTracked)
{
  ds_list_delete(m_yPreviousList, m_maximumPreviousTracked);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Monitor for animation events
//Check to see if the image index has changed (this doesn't need to run unless
//the image index or the sprite index has iterated)
var effectiveIndex = floor(image_index);
var isNewSpriteIndex = sprite_index != m_lastSpriteIndex;
if(isNewSpriteIndex)
{
  //Reset the last sprite index snince the sprite has changed
  m_lastImageIndex = effectiveIndex;
}

if(effectiveIndex != m_lastImageIndex || isNewSpriteIndex)
{ 
  if(!is_undefined(m_animationEventsMap))
  {
    if(ds_map_size(m_animationEventsMap) &gt; 0)
    {
      if(ds_map_exists(m_animationEventsMap, sprite_index))
      {
        var indexMap = m_animationEventsMap[? sprite_index];
        //Build up imageIndexList
        var imageIndexList = ds_list_create();
        var diff = effectiveIndex - m_lastImageIndex;
        if(abs(diff) &gt; 1)
        {
          var addVal = sign(image_speed);
          var value = m_lastImageIndex
          do
          {
            ds_list_add(imageIndexList, value);
            value += addVal;
            if(value &lt; 0)
            {
              //Go back to the sprite max
              value = sprite_get_number(sprite_index) - 1;
            }
            else if(value &gt;= sprite_get_number(sprite_index))
            {
              //Go back down to zero
              value = 0;
            } 
          }until(value == effectiveIndex) 
        }
        else
        {
          //We only shifted by one, just add the effective image index
          ds_list_add(imageIndexList, effectiveIndex);
        }
        
        var thisIndex;
        for(var n = 0; n &lt; ds_list_size(imageIndexList); n++)
        { 
          thisIndex = imageIndexList[| n];
          if(ds_map_exists(indexMap, thisIndex))
          {           
            //Execute every image index event we moved through
            var eventList;
            
            eventList = indexMap[? thisIndex];
            //Execute each event for the sprite/image index combination
            for(var i = 0; i &lt; ds_list_size(eventList); i++)
            {
              var eventMap = eventList[|i];
              script_execute(eventMap[? EventMembers.Script], 
                eventMap[? EventMembers.Args]);
            }            
          }
        }
        //Destroy the list to conserve resources
        ds_list_destroy(imageIndexList);
      }
    }
  }
  
  m_lastImageIndex = floor(image_index);
  m_lastSpriteIndex = sprite_index;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Increment frame number
m_frameNumber++;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="76">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_xscale = m_facing;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
