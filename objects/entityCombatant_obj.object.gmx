<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Combatant init
event_inherited();

CombatantInitEventsMap_scr();

//entityCombatant_obj is any object that uses a weapon
m_weapons = ds_list_create();
//Weapons that are currently being used
m_weaponsActive = ds_list_create();
//This value represents the number of weapons that can be active
m_weaponsActiveCount = 0;
//The value of the currently active weapon index
m_weaponsActiveIndex = 0;
//A series of coords that represent where a weapon can be held
weaponMounts = ds_list_create();
//A boolean indicating a trigger
weaponTriggerPulled = false;
//Weapon pickup modifier
m_weaponPickupAutoSwitch = true;


//Reload Timers
delayedActionList = ds_list_create();
//Create Events map
eventsMap = ds_map_create();
//Collision Masks
movementMask = undefined;
m_movementCoords = undefined;
combatMask = undefined;
//Hand sprites
m_handSprites = undefined;
m_hands = noone;

aimDir = 0;
aimTarget = noone;
m_moving = false;
m_moveDir = undefined;
m_pushAccel = .25;

m_hp = 0;
m_hpMax = 0;

//Combatant collision
m_combatantCollisionRate = 3;
m_combatantCollisionTimer = irandom(m_combatantCollisionRate);

//Combatant property mods
//Modifier sets are stored against Projectile classes in this map, those 
//modifiers are applied to any projectile of that type when it is fired by this
//combatant.
m_projectileClassModifiers = ds_map_create();
m_weaponClassModifiers = ds_map_create();

m_ammoClipSizeMult = 0;
m_ammoClipSizePlus = 0;
m_ammoReloadRateModMult = 0;
m_ammoReloadRateModPlus = 0;

//Test
m_angleMoveback = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Ancestor events
event_inherited();


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///place weapons on self
if(aimDir &lt;= 90 || aimDir &gt;= 270)
{
  image_xscale = abs(image_xscale);
}
else
{
  image_xscale = -abs(image_xscale);
}

var wep;
for(var i = 0; i &lt; ds_list_size(m_weaponsActive); i++)
{
  wep = m_weaponsActive[|i];
  var X = 0;
  var Y = 0;
  var coords;
  if(!is_undefined(wep.m_handPrimary))
  {
    m_handPrimary = wep.m_handPrimary;
    X = m_handPrimary[0] * sign(image_xscale);
    Y = m_handPrimary[1];
    if(instance_exists(m_hands))
    {
      EntityHandsAddPositions_scr(m_hands, array(x + X, y + Y)); 
    }
  }
  
  wep.x = x + X;
  wep.y = y + Y;  
  
  if(!is_undefined(wep.m_handSecondary))
  {
    m_handSecondary = relative_coordinates(wep.x, wep.y, 
      wep.m_handSecondary[0], wep.m_handSecondary[1] * sign(image_xscale), aimDir);
    EntityHandsAddPositions_scr(m_hands, m_handSecondary);
  }
  
  wep.depth = depth - 1;
  wep.image_angle = aimDir;
  if(instance_exists(m_hands))
  {
    m_hands.depth = wep.depth - 1;
  }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Wall Collision

mask_index = movementMask;
var hitList = instance_place_list(x, y, environmentWall_obj, 4, true);
if(ds_list_size(hitList) &gt; 1)
{
  var test = "catch";
}

var angleMove;
if(ds_list_size(hitList) == 1)
{
  angleMove = EntityCombatantGetWallCollisionDirection_scr(hitList[|0]);
  if(!is_undefined(angleMove))
  {
    move_outside(hitList[|0], angleMove, 20);
    //move_outside_solid(angleMove, 1);
    //x += lengthdir_x(.3, angleMove - 180);
    //y += lengthdir_y(.3, angleMove - 180);
    //Eliminate the speed going into the wall
    var angleDeg = abs(angle_difference((angleMove + 180), direction));
    var angleRad = degtorad(angleDeg);
    var vectorMag = cos(angleRad) * speed;
    motion_add(angleMove, vectorMag);
  }
}
else if(ds_list_size(hitList) &gt; 1)
{
  var dirSpdPairList = ds_list_create();
  var angleList = ds_list_create();
  var angleWallMap = ds_map_create();
  for(var i = 0; i &lt; ds_list_size(hitList); i++)
  {
    var angle = EntityCombatantGetWallCollisionDirection_scr(hitList[|i]);
    if(!is_undefined(angle))
    {
      move_outside(hitList[|i], angle, 10);
      //x += lengthdir_x(.3, angle - 180);
      //y += lengthdir_y(.3, angle - 180);
    }
    
    if(is_undefined(angle))
    {
      var test = "catch";
    }
    var dirSpdPair;
    if(!is_undefined(angle) &amp;&amp; ds_list_find_index(angleList, angle) == -1)
    {
      //Add this angle only if it doesn't already exist since duplicate angles
      //will have the unintended effect of having a greater impact on friction
      dirSpdPair = array(angle, 1);
      ds_list_add(dirSpdPairList, dirSpdPair);
      ds_list_add(angleList, angle);
    }
  }
  
  var vectorArr = vectors_combine_list(dirSpdPairList);
  var angleMove = vectorArr[0];
  m_angleMoveback = angleMove;
  //move_outside_solid(angleMove, 2);
  
  //x += lengthdir_x(.9, angleMove - 180);
  //y += lengthdir_y(.9, angleMove - 180);
  var angleDeg = abs(angle_difference((angleMove + 180), direction));
  var angleRad = degtorad(angleDeg);
  var vectorMag = cos(angleRad) * speed;
  motion_add(angleMove, vectorMag);
  
  ds_list_destroy(angleList);
  ds_list_destroy(dirSpdPairList);
}

//Reset the current mask
mask_index = combatMask;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Ancestor events
event_inherited();


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Combatant movement
if(!is_undefined(m_moveDir))
{
  motion_add(m_moveDir, accel);
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Combatant Collision
m_combatantCollisionTimer -= global.timeSpeed;
if(m_combatantCollisionTimer &lt;= 0)
{
  m_combatantCollisionTimer = m_combatantCollisionRate;
  var combatantList = instance_place_list(x, y, entityCombatant_obj, 1000);
  //Add the combatant shadows to the list
  instance_place_list(x, y, entityCombatantShadow_obj, 1000, false, combatantList);
  
  var combatant, pushDirection;
  for(var i = 0; i &lt; ds_list_size(combatantList); i++)
  {
    combatant = combatantList[|i];
    pushDirection = point_direction(x, y, combatant.x, combatant.y);
    if(!object_is(combatant.object_index, playerBase_obj))
    {
      with(combatant)
      {
        motion_add(pushDirection, m_pushAccel);
      }
    }
  }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Monitor activeWeapons
if(m_weaponsActiveCount &gt; ds_list_size(m_weaponsActive))
{
  if(ds_list_size(m_weapons) &gt; ds_list_size(m_weaponsActive))
  {
    for(var i = 0; i &lt; ds_list_size(m_weapons); i++)
    {
      if(ds_list_find_index(m_weaponsActive, m_weapons[|i]) == -1)
      {
        ds_list_add(m_weaponsActive, m_weapons[|i]);
      }
      if(ds_list_size(m_weaponsActive) &gt;= m_weaponsActiveCount)
      {
        break;
      }
    }    
  }
}

//weaponTriggerPulled = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Ancestor Events
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if(debug_mode)
{
  draw_text_colour(x, y - 40, 
    string(x) + ", " + string(y), c_red, c_red, c_red, c_red, 1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
